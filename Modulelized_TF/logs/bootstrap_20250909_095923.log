== Bootstrap started Tue, Sep  9, 2025  9:59:23 AM ==

==================== Running terraform apply =====================
[0m[1mInitializing the backend...[0m
[0m[1mUpgrading modules...[0m
- bastion in modules\BASTION
- dns in modules\DNS
- eks in modules\EKS
- rds in modules\RDS
- redis in modules\REDIS
- vpc in modules\VPC
[0m[1mInitializing provider plugins...[0m
- Finding hashicorp/aws versions matching "~> 5.0"...
- Finding hashicorp/kubernetes versions matching "~> 2.23"...
- Using previously-installed hashicorp/aws v5.100.0
- Using previously-installed hashicorp/kubernetes v2.38.0

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[0m[1mdata.aws_ami.bastion: Reading...[0m[0m
[0m[1mmodule.bastion.data.aws_ami.bastion: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=335507813633][0m
[0m[1mdata.aws_ami.bastion: Read complete after 1s [id=ami-0ae2c887094315bed][0m
[0m[1mmodule.bastion.data.aws_ami.bastion: Read complete after 1s [id=ami-068d7b3dd93d9c2a6][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # data.aws_eks_cluster.eks[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_eks_cluster" "eks" {
      [32m+[0m[0m access_config             = (known after apply)
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m certificate_authority     = (known after apply)
      [32m+[0m[0m cluster_id                = (known after apply)
      [32m+[0m[0m compute_config            = (known after apply)
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types = (known after apply)
      [32m+[0m[0m endpoint                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m identity                  = (known after apply)
      [32m+[0m[0m kubernetes_network_config = (known after apply)
      [32m+[0m[0m name                      = (known after apply)
      [32m+[0m[0m outpost_config            = (known after apply)
      [32m+[0m[0m platform_version          = (known after apply)
      [32m+[0m[0m remote_network_config     = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m storage_config            = (known after apply)
      [32m+[0m[0m tags                      = (known after apply)
      [32m+[0m[0m upgrade_policy            = (known after apply)
      [32m+[0m[0m version                   = (known after apply)
      [32m+[0m[0m vpc_config                = (known after apply)
      [32m+[0m[0m zonal_shift_config        = (known after apply)
    }

[1m  # data.aws_eks_cluster_auth.eks[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_eks_cluster_auth" "eks" {
      [32m+[0m[0m id    = (known after apply)
      [32m+[0m[0m name  = (known after apply)
      [32m+[0m[0m token = (sensitive value)
    }

[1m  # aws_ecr_repository.shop_backend[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "shop_backend" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "shop-backend"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Name" = "shop-backend"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Name" = "shop-backend"
        }

      [32m+[0m[0m image_scanning_configuration {
          [32m+[0m[0m scan_on_push = true
        }
    }

[1m  # aws_ecr_repository.shop_frontend[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "shop_frontend" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "shop-frontend"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Name" = "shop-frontend"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Name" = "shop-frontend"
        }

      [32m+[0m[0m image_scanning_configuration {
          [32m+[0m[0m scan_on_push = true
        }
    }

[1m  # aws_eks_access_entry.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "bastion" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = (known after apply)
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = [
          [32m+[0m[0m "eks-admins",
        ]
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = (known after apply)
      [32m+[0m[0m tags_all          = (known after apply)
      [32m+[0m[0m type              = "EC2"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # aws_iam_instance_profile.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_instance_profile" "bastion" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m create_date = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "my-eks-shop-cluster-bastion-profile"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m role        = "my-eks-shop-cluster-bastion-role"
      [32m+[0m[0m tags_all    = (known after apply)
      [32m+[0m[0m unique_id   = (known after apply)
    }

[1m  # aws_iam_role.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "bastion" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "my-eks-shop-cluster-bastion-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.bastion_policies["admin"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "bastion_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
      [32m+[0m[0m role       = "my-eks-shop-cluster-bastion-role"
    }

[1m  # aws_instance.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "bastion" {
      [32m+[0m[0m ami                                  = "ami-0ae2c887094315bed"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = true
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m enable_primary_ipv6                  = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = "my-eks-shop-cluster-bastion-profile"
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t3.large"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "LetMeIn"
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-bastion"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-bastion"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = "b6cee04d9df13814e9c4f22782647d2a4a812330"
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)

      [32m+[0m[0m capacity_reservation_specification (known after apply)

      [32m+[0m[0m cpu_options (known after apply)

      [32m+[0m[0m ebs_block_device (known after apply)

      [32m+[0m[0m enclave_options (known after apply)

      [32m+[0m[0m ephemeral_block_device (known after apply)

      [32m+[0m[0m instance_market_options (known after apply)

      [32m+[0m[0m maintenance_options (known after apply)

      [32m+[0m[0m metadata_options (known after apply)

      [32m+[0m[0m network_interface (known after apply)

      [32m+[0m[0m private_dns_name_options (known after apply)

      [32m+[0m[0m root_block_device {
          [32m+[0m[0m delete_on_termination = true
          [32m+[0m[0m device_name           = (known after apply)
          [32m+[0m[0m encrypted             = (known after apply)
          [32m+[0m[0m iops                  = (known after apply)
          [32m+[0m[0m kms_key_id            = (known after apply)
          [32m+[0m[0m tags_all              = (known after apply)
          [32m+[0m[0m throughput            = (known after apply)
          [32m+[0m[0m volume_id             = (known after apply)
          [32m+[0m[0m volume_size           = 30
          [32m+[0m[0m volume_type           = "gp3"
        }
    }

[1m  # aws_security_group.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "bastion" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for bastion host"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow SSH from allowed CIDRs"
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "my-eks-shop-cluster-bastion-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-bastion"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-bastion"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # kubernetes_cluster_role_binding.bastion_admin[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_cluster_role_binding" "bastion_admin" {
      [32m+[0m[0m id = (known after apply)

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "bastion-admin-binding"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }

      [32m+[0m[0m role_ref {
          [32m+[0m[0m api_group = "rbac.authorization.k8s.io"
          [32m+[0m[0m kind      = "ClusterRole"
          [32m+[0m[0m name      = "cluster-admin"
        }

      [32m+[0m[0m subject {
          [32m+[0m[0m api_group = "rbac.authorization.k8s.io"
          [32m+[0m[0m kind      = "Group"
          [32m+[0m[0m name      = "eks-admins"
          [32m+[0m[0m namespace = "default"
        }
    }

[1m  # module.bastion.aws_eks_access_entry.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "bastion" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = "my-eks-shop-cluster"
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = [
          [32m+[0m[0m "eks-admins",
        ]
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = (known after apply)
      [32m+[0m[0m tags_all          = (known after apply)
      [32m+[0m[0m type              = "EC2"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # module.bastion.aws_iam_instance_profile.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_instance_profile" "bastion" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m create_date = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "bastion-profile-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m role        = "bastion-role-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m tags_all    = (known after apply)
      [32m+[0m[0m unique_id   = (known after apply)
    }

[1m  # module.bastion.aws_iam_role.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "bastion" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "bastion-role-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.bastion.aws_iam_role_policy.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "bastion" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "bastion-policy-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "eks:DescribeCluster",
                          [32m+[0m[0m "eks:ListClusters",
                          [32m+[0m[0m "ecr:GetAuthorizationToken",
                          [32m+[0m[0m "ecr:BatchCheckLayerAvailability",
                          [32m+[0m[0m "ecr:GetDownloadUrlForLayer",
                          [32m+[0m[0m "ecr:BatchGetImage",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.bastion.aws_instance.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "bastion" {
      [32m+[0m[0m ami                                  = "ami-068d7b3dd93d9c2a6"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = true
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m enable_primary_ipv6                  = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = "bastion-profile-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t3.large"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "LetMeIn"
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-bastion"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-bastion"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = "54aa17086219072d461ec98815d5643b7f339f90"
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)

      [32m+[0m[0m capacity_reservation_specification (known after apply)

      [32m+[0m[0m cpu_options (known after apply)

      [32m+[0m[0m ebs_block_device (known after apply)

      [32m+[0m[0m enclave_options (known after apply)

      [32m+[0m[0m ephemeral_block_device (known after apply)

      [32m+[0m[0m instance_market_options (known after apply)

      [32m+[0m[0m maintenance_options (known after apply)

      [32m+[0m[0m metadata_options (known after apply)

      [32m+[0m[0m network_interface (known after apply)

      [32m+[0m[0m private_dns_name_options (known after apply)

      [32m+[0m[0m root_block_device {
          [32m+[0m[0m delete_on_termination = true
          [32m+[0m[0m device_name           = (known after apply)
          [32m+[0m[0m encrypted             = (known after apply)
          [32m+[0m[0m iops                  = (known after apply)
          [32m+[0m[0m kms_key_id            = (known after apply)
          [32m+[0m[0m tags_all              = (known after apply)
          [32m+[0m[0m throughput            = (known after apply)
          [32m+[0m[0m volume_id             = (known after apply)
          [32m+[0m[0m volume_size           = 30
          [32m+[0m[0m volume_type           = "gp3"
        }
    }

[1m  # module.bastion.aws_security_group.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "bastion" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for bastion host"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow SSH from allowed CIDRs"
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "my-eks-shop-cluster-bastion-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-bastion"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-bastion"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.dns.aws_eks_pod_identity_association.external_dns[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_pod_identity_association" "external_dns" {
      [32m+[0m[0m association_arn = (known after apply)
      [32m+[0m[0m association_id  = (known after apply)
      [32m+[0m[0m cluster_name    = "my-eks-shop-cluster"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m namespace       = "kube-system"
      [32m+[0m[0m role_arn        = (known after apply)
      [32m+[0m[0m service_account = "external-dns"
      [32m+[0m[0m tags_all        = {}
    }

[1m  # module.dns.aws_iam_policy.external_dns[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "external_dns" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Allow ExternalDNS to manage Route53 records"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "external-dns-route53-policy-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "route53:ListHostedZones",
                          [32m+[0m[0m "route53:ListResourceRecordSets",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "route53:ChangeResourceRecordSets",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:route53:::hostedzone/Z076855811XMR50K5FM98"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Cluster" = "my-eks-shop-cluster"
          [32m+[0m[0m "Name"    = "external-dns-policy"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Cluster" = "my-eks-shop-cluster"
          [32m+[0m[0m "Name"    = "external-dns-policy"
        }
    }

[1m  # module.dns.aws_iam_role.external_dns[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "external_dns" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                          [32m+[0m[0m "sts:TagSession",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "pods.eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "external-dns-pod-identity-role-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Cluster" = "my-eks-shop-cluster"
          [32m+[0m[0m "Name"    = "external-dns-role"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Cluster" = "my-eks-shop-cluster"
          [32m+[0m[0m "Name"    = "external-dns-role"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.dns.aws_iam_role_policy_attachment.external_dns_attach[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "external_dns_attach" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "external-dns-pod-identity-role-335507813633-my-eks-shop-cluster"
    }

[1m  # module.eks.aws_eks_addon.coredns[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "coredns" {
      [32m+[0m[0m addon_name           = "coredns"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "my-eks-shop-cluster"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # module.eks.aws_eks_addon.kube_proxy[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "kube_proxy" {
      [32m+[0m[0m addon_name           = "kube-proxy"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "my-eks-shop-cluster"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # module.eks.aws_eks_addon.pod_identity_agent[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "pod_identity_agent" {
      [32m+[0m[0m addon_name           = "eks-pod-identity-agent"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "my-eks-shop-cluster"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # module.eks.aws_eks_addon.vpc_cni[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "vpc_cni" {
      [32m+[0m[0m addon_name           = "vpc-cni"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "my-eks-shop-cluster"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # module.eks.aws_eks_cluster.eks[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "eks" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "my-eks-shop-cluster"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags_all                      = (known after apply)
      [32m+[0m[0m version                       = "1.28"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = true
        }

      [32m+[0m[0m kubernetes_network_config (known after apply)

      [32m+[0m[0m upgrade_policy (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m subnet_ids                = (known after apply)
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_eks_node_group.nodes[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "nodes" {
      [32m+[0m[0m ami_type               = "AL2023_x86_64_STANDARD"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "ON_DEMAND"
      [32m+[0m[0m cluster_name           = "my-eks-shop-cluster"
      [32m+[0m[0m disk_size              = 20
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "m7i-flex.large",
        ]
      [32m+[0m[0m node_group_name        = "YourEKSNodeGroups"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m node_repair_config (known after apply)

      [32m+[0m[0m remote_access {
          [32m+[0m[0m ec2_ssh_key = "LetMeIn"
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 4
          [32m+[0m[0m max_size     = 4
          [32m+[0m[0m min_size     = 4
        }

      [32m+[0m[0m update_config (known after apply)
    }

[1m  # module.eks.aws_eks_pod_identity_association.shopping_mall[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_pod_identity_association" "shopping_mall" {
      [32m+[0m[0m association_arn = (known after apply)
      [32m+[0m[0m association_id  = (known after apply)
      [32m+[0m[0m cluster_name    = "my-eks-shop-cluster"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m namespace       = "shop"
      [32m+[0m[0m role_arn        = (known after apply)
      [32m+[0m[0m service_account = "shopping-mall-sa"
      [32m+[0m[0m tags_all        = {}
    }

[1m  # module.eks.aws_iam_role.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_cluster" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                          [32m+[0m[0m "sts:TagSession",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "YourEKSClusterRole-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role.eks_node[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_node" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "YourEKSNodeRole-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role.shopping_mall_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "shopping_mall_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                          [32m+[0m[0m "sts:TagSession",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "pods.eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "ShoppingMallPodRole-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy.shopping_mall_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "shopping_mall_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "ShoppingMallPolicy-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "rds:DescribeDBInstances",
                          [32m+[0m[0m "rds:DescribeDBClusters",
                          [32m+[0m[0m "rds:Connect",
                          [32m+[0m[0m "elasticache:DescribeCacheClusters",
                          [32m+[0m[0m "elasticache:DescribeReplicationGroups",
                          [32m+[0m[0m "elasticache:Connect",
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:DeleteObject",
                          [32m+[0m[0m "s3:ListBucket",
                          [32m+[0m[0m "secretsmanager:GetSecretValue",
                          [32m+[0m[0m "secretsmanager:DescribeSecret",
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:DescribeLogGroups",
                          [32m+[0m[0m "logs:DescribeLogStreams",
                          [32m+[0m[0m "ssm:GetParameter",
                          [32m+[0m[0m "ssm:GetParameters",
                          [32m+[0m[0m "ssm:GetParametersByPath",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_policies[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy"
      [32m+[0m[0m role       = "YourEKSClusterRole-335507813633-my-eks-shop-cluster"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_policies[1][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = "YourEKSClusterRole-335507813633-my-eks-shop-cluster"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_policies[2][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSComputePolicy"
      [32m+[0m[0m role       = "YourEKSClusterRole-335507813633-my-eks-shop-cluster"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_policies[3][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy"
      [32m+[0m[0m role       = "YourEKSClusterRole-335507813633-my-eks-shop-cluster"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_policies[4][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy"
      [32m+[0m[0m role       = "YourEKSClusterRole-335507813633-my-eks-shop-cluster"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.node_policies[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "node_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = "YourEKSNodeRole-335507813633-my-eks-shop-cluster"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.node_policies[1][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "node_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "YourEKSNodeRole-335507813633-my-eks-shop-cluster"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.node_policies[2][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "node_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "YourEKSNodeRole-335507813633-my-eks-shop-cluster"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.shopping_mall_ecr_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "shopping_mall_ecr_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "ShoppingMallPodRole-335507813633-my-eks-shop-cluster"
    }

[1m  # module.eks.kubernetes_namespace.shop[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_namespace" "shop" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m wait_for_default_service_account = false

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "shop"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # module.eks.kubernetes_service_account.shopping_mall[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_service_account" "shopping_mall" {
      [32m+[0m[0m automount_service_account_token = true
      [32m+[0m[0m default_secret_name             = (known after apply)
      [32m+[0m[0m id                              = (known after apply)

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "shopping-mall-sa"
          [32m+[0m[0m namespace        = "shop"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # module.rds.aws_db_instance.db[0m will be created
[0m  [32m+[0m[0m resource "aws_db_instance" "db" {
      [32m+[0m[0m address                               = (known after apply)
      [32m+[0m[0m allocated_storage                     = 20
      [32m+[0m[0m apply_immediately                     = true
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m backup_retention_period               = (known after apply)
      [32m+[0m[0m backup_target                         = (known after apply)
      [32m+[0m[0m backup_window                         = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m character_set_name                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m database_insights_mode                = (known after apply)
      [32m+[0m[0m db_name                               = "shopdb"
      [32m+[0m[0m db_subnet_group_name                  = "my-eks-shop-cluster-db-subnet-group"
      [32m+[0m[0m dedicated_log_volume                  = false
      [32m+[0m[0m delete_automated_backups              = true
      [32m+[0m[0m deletion_protection                   = false
      [32m+[0m[0m domain_fqdn                           = (known after apply)
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "mysql"
      [32m+[0m[0m engine_lifecycle_support              = (known after apply)
      [32m+[0m[0m engine_version                        = "8.0"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m hosted_zone_id                        = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "my-eks-shop-cluster-db"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.t3.micro"
      [32m+[0m[0m iops                                  = (known after apply)
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m latest_restorable_time                = (known after apply)
      [32m+[0m[0m license_model                         = (known after apply)
      [32m+[0m[0m listener_endpoint                     = (known after apply)
      [32m+[0m[0m maintenance_window                    = (known after apply)
      [32m+[0m[0m master_user_secret                    = (known after apply)
      [32m+[0m[0m master_user_secret_kms_key_id         = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m multi_az                              = false
      [32m+[0m[0m nchar_character_set_name              = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m option_group_name                     = (known after apply)
      [32m+[0m[0m parameter_group_name                  = (known after apply)
      [32m+[0m[0m password                              = (sensitive value)
      [32m+[0m[0m password_wo                           = (write-only attribute)
      [32m+[0m[0m performance_insights_enabled          = false
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m publicly_accessible                   = false
      [32m+[0m[0m replica_mode                          = (known after apply)
      [32m+[0m[0m replicas                              = (known after apply)
      [32m+[0m[0m resource_id                           = (known after apply)
      [32m+[0m[0m skip_final_snapshot                   = true
      [32m+[0m[0m snapshot_identifier                   = (known after apply)
      [32m+[0m[0m status                                = (known after apply)
      [32m+[0m[0m storage_throughput                    = (known after apply)
      [32m+[0m[0m storage_type                          = "gp3"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-db"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-db"
        }
      [32m+[0m[0m timezone                              = (known after apply)
      [32m+[0m[0m username                              = "admin"
      [32m+[0m[0m vpc_security_group_ids                = (known after apply)
    }

[1m  # module.rds.aws_db_subnet_group.db[0m will be created
[0m  [32m+[0m[0m resource "aws_db_subnet_group" "db" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m description             = "Managed by Terraform"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m name                    = "my-eks-shop-cluster-db-subnet-group"
      [32m+[0m[0m name_prefix             = (known after apply)
      [32m+[0m[0m subnet_ids              = (known after apply)
      [32m+[0m[0m supported_network_types = (known after apply)
      [32m+[0m[0m tags                    = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-db-subnet-group"
        }
      [32m+[0m[0m tags_all                = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-db-subnet-group"
        }
      [32m+[0m[0m vpc_id                  = (known after apply)
    }

[1m  # module.rds.aws_security_group.db[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "db" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for MySQL RDS instance"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.10.0.0/16",
                ]
              [32m+[0m[0m description      = "Allow MySQL access from within the VPC"
              [32m+[0m[0m from_port        = 3306
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3306
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "my-eks-shop-cluster-db-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-db"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-db"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.redis.aws_elasticache_cluster.redis[0m will be created
[0m  [32m+[0m[0m resource "aws_elasticache_cluster" "redis" {
      [32m+[0m[0m apply_immediately          = (known after apply)
      [32m+[0m[0m arn                        = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade = "true"
      [32m+[0m[0m availability_zone          = (known after apply)
      [32m+[0m[0m az_mode                    = (known after apply)
      [32m+[0m[0m cache_nodes                = (known after apply)
      [32m+[0m[0m cluster_address            = (known after apply)
      [32m+[0m[0m cluster_id                 = "my-eks-shop-cluster-redis"
      [32m+[0m[0m configuration_endpoint     = (known after apply)
      [32m+[0m[0m engine                     = "redis"
      [32m+[0m[0m engine_version             = "6.x"
      [32m+[0m[0m engine_version_actual      = (known after apply)
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m ip_discovery               = (known after apply)
      [32m+[0m[0m maintenance_window         = "sun:05:00-sun:06:00"
      [32m+[0m[0m network_type               = (known after apply)
      [32m+[0m[0m node_type                  = "cache.t3.micro"
      [32m+[0m[0m num_cache_nodes            = 1
      [32m+[0m[0m parameter_group_name       = "my-eks-shop-cluster-redis-params"
      [32m+[0m[0m port                       = 6379
      [32m+[0m[0m preferred_outpost_arn      = (known after apply)
      [32m+[0m[0m replication_group_id       = (known after apply)
      [32m+[0m[0m security_group_ids         = (known after apply)
      [32m+[0m[0m snapshot_retention_limit   = 7
      [32m+[0m[0m snapshot_window            = "04:00-05:00"
      [32m+[0m[0m subnet_group_name          = "my-eks-shop-cluster-redis-subnet-group"
      [32m+[0m[0m tags                       = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-redis"
        }
      [32m+[0m[0m tags_all                   = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-redis"
        }
      [32m+[0m[0m transit_encryption_enabled = (known after apply)
    }

[1m  # module.redis.aws_elasticache_parameter_group.redis[0m will be created
[0m  [32m+[0m[0m resource "aws_elasticache_parameter_group" "redis" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Managed by Terraform"
      [32m+[0m[0m family      = "redis7"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "my-eks-shop-cluster-redis-params"
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-redis-params"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-redis-params"
        }

      [32m+[0m[0m parameter {
          [32m+[0m[0m name  = "maxmemory-policy"
          [32m+[0m[0m value = "allkeys-lru"
        }
    }

[1m  # module.redis.aws_elasticache_subnet_group.redis[0m will be created
[0m  [32m+[0m[0m resource "aws_elasticache_subnet_group" "redis" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Managed by Terraform"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "my-eks-shop-cluster-redis-subnet-group"
      [32m+[0m[0m subnet_ids  = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-redis-subnet-group"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-redis-subnet-group"
        }
      [32m+[0m[0m vpc_id      = (known after apply)
    }

[1m  # module.redis.aws_security_group.redis[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "redis" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for ElastiCache Redis"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.10.0.0/16",
                ]
              [32m+[0m[0m description      = "Allow Redis access from within the VPC"
              [32m+[0m[0m from_port        = 6379
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 6379
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "my-eks-shop-cluster-redis-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-redis"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-redis"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc.aws_eip.nat_eip[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat_eip" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "NAT-EIP"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "NAT-EIP"
        }
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.vpc.aws_internet_gateway.igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "MyVPC-IGW"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "MyVPC-IGW"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_nat_gateway.nat[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "NAT-GW"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "NAT-GW"
        }
    }

[1m  # module.vpc.aws_route_table.private[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m nat_gateway_id             = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Private-RT"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Private-RT"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.public[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m gateway_id                 = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Public-RT"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Public-RT"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private1[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private1" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private2[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private2" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public1[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public1" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public2[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public2" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-northeast-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.10.11.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment"                       = "dev"
          [32m+[0m[0m "Name"                              = "Private-Subnet-1"
          [32m+[0m[0m "kubernetes.io/cluster/eks-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/internal-elb"   = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment"                       = "dev"
          [32m+[0m[0m "Name"                              = "Private-Subnet-1"
          [32m+[0m[0m "kubernetes.io/cluster/eks-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/internal-elb"   = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-northeast-2c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.10.12.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment"                       = "dev"
          [32m+[0m[0m "Name"                              = "Private-Subnet-2"
          [32m+[0m[0m "kubernetes.io/cluster/eks-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/internal-elb"   = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment"                       = "dev"
          [32m+[0m[0m "Name"                              = "Private-Subnet-2"
          [32m+[0m[0m "kubernetes.io/cluster/eks-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/internal-elb"   = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-northeast-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.10.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment"                       = "dev"
          [32m+[0m[0m "Name"                              = "Public-Subnet-1"
          [32m+[0m[0m "kubernetes.io/cluster/eks-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/elb"            = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment"                       = "dev"
          [32m+[0m[0m "Name"                              = "Public-Subnet-1"
          [32m+[0m[0m "kubernetes.io/cluster/eks-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/elb"            = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-northeast-2c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.10.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment"                       = "dev"
          [32m+[0m[0m "Name"                              = "Public-Subnet-2"
          [32m+[0m[0m "kubernetes.io/cluster/eks-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/elb"            = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment"                       = "dev"
          [32m+[0m[0m "Name"                              = "Public-Subnet-2"
          [32m+[0m[0m "kubernetes.io/cluster/eks-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/elb"            = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_vpc.main[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "main" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.10.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "MyVPC"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "MyVPC"
        }
    }

[1mPlan:[0m 62 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m bastion_dns            = (known after apply)
  [32m+[0m[0m bastion_public_ip      = (known after apply)
  [32m+[0m[0m cluster_endpoint       = (known after apply)
  [32m+[0m[0m cluster_id             = (known after apply)
  [32m+[0m[0m db_endpoint            = (known after apply)
  [32m+[0m[0m namespace_name         = "shop"
  [32m+[0m[0m redis_endpoint         = (known after apply)
  [32m+[0m[0m service_account_name   = "shopping-mall-sa"
  [32m+[0m[0m shopping_mall_role_arn = (known after apply)
  [32m+[0m[0m vpc_id                 = (known after apply)
[0m[1mmodule.dns.aws_iam_policy.external_dns: Creating...[0m[0m
[0m[1maws_ecr_repository.shop_frontend: Creating...[0m[0m
[0m[1mmodule.bastion.aws_iam_role.bastion: Creating...[0m[0m
[0m[1mmodule.redis.aws_elasticache_parameter_group.redis: Creating...[0m[0m
[0m[1maws_ecr_repository.shop_backend: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role.shopping_mall_role: Creating...[0m[0m
[0m[1mmodule.vpc.aws_eip.nat_eip: Creating...[0m[0m
[0m[1maws_iam_role.bastion: Creating...[0m[0m
[0m[1mmodule.dns.aws_iam_role.external_dns: Creating...[0m[0m
[0m[1mmodule.vpc.aws_vpc.main: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role.eks_node: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role.eks_cluster: Creating...[0m[0m
[0m[1mmodule.redis.aws_elasticache_parameter_group.redis: Creation complete after 0s [id=my-eks-shop-cluster-redis-params][0m
[0m[1mmodule.vpc.aws_eip.nat_eip: Creation complete after 1s [id=eipalloc-0f1db75f28753c751][0m
[0m[1mmodule.dns.aws_iam_policy.external_dns: Creation complete after 1s [id=arn:aws:iam::335507813633:policy/external-dns-route53-policy-335507813633-my-eks-shop-cluster][0m
[0m[1mmodule.dns.aws_iam_role.external_dns: Creation complete after 2s [id=external-dns-pod-identity-role-335507813633-my-eks-shop-cluster][0m
[0m[1mmodule.dns.aws_iam_role_policy_attachment.external_dns_attach: Creating...[0m[0m
[0m[1mmodule.dns.aws_eks_pod_identity_association.external_dns: Creating...[0m[0m
[0m[1mmodule.bastion.aws_iam_role.bastion: Creation complete after 2s [id=bastion-role-335507813633-my-eks-shop-cluster][0m
[0m[1mmodule.bastion.aws_iam_role_policy.bastion: Creating...[0m[0m
[0m[1mmodule.bastion.aws_iam_instance_profile.bastion: Creating...[0m[0m
[0m[1mmodule.bastion.aws_eks_access_entry.bastion: Creating...[0m[0m
[0m[1mmodule.dns.aws_iam_role_policy_attachment.external_dns_attach: Creation complete after 0s [id=external-dns-pod-identity-role-335507813633-my-eks-shop-cluster-20250909005943804700000002][0m
[0m[1mmodule.bastion.aws_iam_role_policy.bastion: Creation complete after 0s [id=bastion-role-335507813633-my-eks-shop-cluster:bastion-policy-335507813633-my-eks-shop-cluster][0m
[0m[1mmodule.bastion.aws_iam_instance_profile.bastion: Creation complete after 7s [id=bastion-profile-335507813633-my-eks-shop-cluster][0m
[0m[1mmodule.vpc.aws_vpc.main: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.vpc.aws_vpc.main: Creation complete after 11s [id=vpc-0f01002dc010c4797][0m
[0m[1mmodule.vpc.aws_internet_gateway.igw: Creating...[0m[0m
[0m[1mmodule.vpc.aws_subnet.private2: Creating...[0m[0m
[0m[1mmodule.vpc.aws_subnet.private1: Creating...[0m[0m
[0m[1mmodule.vpc.aws_subnet.public1: Creating...[0m[0m
[0m[1mmodule.vpc.aws_subnet.public2: Creating...[0m[0m
[0m[1maws_security_group.bastion: Creating...[0m[0m
[0m[1mmodule.bastion.aws_security_group.bastion: Creating...[0m[0m
[0m[1mmodule.rds.aws_security_group.db: Creating...[0m[0m
[0m[1mmodule.redis.aws_security_group.redis: Creating...[0m[0m
[0m[1mmodule.vpc.aws_internet_gateway.igw: Creation complete after 1s [id=igw-0e5181c15c62846dd][0m
[0m[1mmodule.vpc.aws_route_table.public: Creating...[0m[0m
[0m[1mmodule.vpc.aws_subnet.private2: Creation complete after 1s [id=subnet-0b539bfe5869b67f8][0m
[0m[1mmodule.vpc.aws_route_table.public: Creation complete after 1s [id=rtb-095273ac8a96176ac][0m
[0m[1mmodule.rds.aws_security_group.db: Creation complete after 3s [id=sg-038e19791877a2518][0m
[0m[1mmodule.bastion.aws_security_group.bastion: Creation complete after 3s [id=sg-0c2ad7e58e7ac58a9][0m
[0m[1maws_security_group.bastion: Creation complete after 3s [id=sg-0833ba59249d9714e][0m
[0m[1mmodule.redis.aws_security_group.redis: Creation complete after 3s [id=sg-08dd492efd4d3130a][0m
[0m[1mmodule.vpc.aws_subnet.private1: Creation complete after 5s [id=subnet-0baacecc2ecd21547][0m
[0m[1mmodule.redis.aws_elasticache_subnet_group.redis: Creating...[0m[0m
[0m[1mmodule.rds.aws_db_subnet_group.db: Creating...[0m[0m
[0m[1mmodule.rds.aws_db_subnet_group.db: Creation complete after 0s [id=my-eks-shop-cluster-db-subnet-group][0m
[0m[1mmodule.rds.aws_db_instance.db: Creating...[0m[0m
[0m[1mmodule.redis.aws_elasticache_subnet_group.redis: Creation complete after 0s [id=my-eks-shop-cluster-redis-subnet-group][0m
[0m[1mmodule.redis.aws_elasticache_cluster.redis: Creating...[0m[0m
[0m[1mmodule.vpc.aws_subnet.public1: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.vpc.aws_subnet.public2: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.vpc.aws_subnet.public1: Creation complete after 12s [id=subnet-0fc3462a545a1041d][0m
[0m[1mmodule.vpc.aws_route_table_association.public1: Creating...[0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Creating...[0m[0m
[0m[1mmodule.vpc.aws_route_table_association.public1: Creation complete after 0s [id=rtbassoc-066bd064f99d2da3b][0m
[0m[1mmodule.vpc.aws_subnet.public2: Creation complete after 15s [id=subnet-0ebd02cda259e72d5][0m
[0m[1mmodule.vpc.aws_route_table_association.public2: Creating...[0m[0m
[0m[1mmodule.vpc.aws_route_table_association.public2: Creation complete after 0s [id=rtbassoc-09325d97ceeba47cf][0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Still creating... [00m10s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [00m20s elapsed][0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Still creating... [00m20s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [00m30s elapsed][0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Still creating... [00m30s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [00m40s elapsed][0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Still creating... [00m40s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [00m50s elapsed][0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Still creating... [00m50s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [01m00s elapsed][0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Still creating... [01m00s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [01m10s elapsed][0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Still creating... [01m10s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [01m20s elapsed][0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Still creating... [01m20s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [01m30s elapsed][0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Still creating... [01m30s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [01m40s elapsed][0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Still creating... [01m40s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [01m50s elapsed][0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Still creating... [01m50s elapsed][0m[0m
[0m[1mmodule.vpc.aws_nat_gateway.nat: Creation complete after 1m53s [id=nat-073ea2b1671d2581e][0m
[0m[1mmodule.vpc.aws_route_table.private: Creating...[0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [02m00s elapsed][0m[0m
[0m[1mmodule.vpc.aws_route_table.private: Creation complete after 1s [id=rtb-0cc039baa7fd7cb2a][0m
[0m[1mmodule.vpc.aws_route_table_association.private2: Creating...[0m[0m
[0m[1mmodule.vpc.aws_route_table_association.private1: Creating...[0m[0m
[0m[1mmodule.vpc.aws_route_table_association.private1: Creation complete after 1s [id=rtbassoc-00aebced3ead895c5][0m
[0m[1mmodule.vpc.aws_route_table_association.private2: Creation complete after 1s [id=rtbassoc-0cae7777f4c26d464][0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [02m10s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [02m20s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [02m30s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [02m40s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [02m50s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [03m00s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [03m10s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [03m20s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [03m30s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [03m40s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [03m50s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Still creating... [04m00s elapsed][0m[0m
[0m[1mmodule.rds.aws_db_instance.db: Creation complete after 4m5s [id=db-LBRKWC7AXVYCOOUQMJSCFJA7VE][0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating IAM Role (my-eks-shop-cluster-bastion-role): operation error IAM: CreateRole, https response error StatusCode: 409, RequestID: bb1c265e-4847-4411-944c-5e5c15d3b875, EntityAlreadyExists: Role with name my-eks-shop-cluster-bastion-role already exists.[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with aws_iam_role.bastion,
[31m│[0m [0m  on main-bastion-setting.tf line 12, in resource "aws_iam_role" "bastion":
[31m│[0m [0m  12: resource "aws_iam_role" "bastion" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating ECR Repository (shop-backend): operation error ECR: CreateRepository, https response error StatusCode: 400, RequestID: a74cec2b-f6b0-4b44-97cd-30e5223a7a76, RepositoryAlreadyExistsException: The repository with name 'shop-backend' already exists in the registry with id '335507813633'[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with aws_ecr_repository.shop_backend,
[31m│[0m [0m  on main-bastion-setting.tf line 65, in resource "aws_ecr_repository" "shop_backend":
[31m│[0m [0m  65: resource "aws_ecr_repository" "shop_backend" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating ECR Repository (shop-frontend): operation error ECR: CreateRepository, https response error StatusCode: 400, RequestID: 4ee7dc0d-30f7-4963-b1c9-fafe3bd81f48, RepositoryAlreadyExistsException: The repository with name 'shop-frontend' already exists in the registry with id '335507813633'[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with aws_ecr_repository.shop_frontend,
[31m│[0m [0m  on main-bastion-setting.tf line 75, in resource "aws_ecr_repository" "shop_frontend":
[31m│[0m [0m  75: resource "aws_ecr_repository" "shop_frontend" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating EKS Access Entry (my-eks-shop-cluster:arn:aws:iam::335507813633:role/bastion-role-335507813633-my-eks-shop-cluster): operation error EKS: CreateAccessEntry, https response error StatusCode: 404, RequestID: 23242660-c6e0-45cb-b590-045f310b201c, ResourceNotFoundException: No cluster found for name: my-eks-shop-cluster.[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with module.bastion.aws_eks_access_entry.bastion,
[31m│[0m [0m  on modules\BASTION\main.tf line 168, in resource "aws_eks_access_entry" "bastion":
[31m│[0m [0m 168: resource "aws_eks_access_entry" "bastion" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating AWS EKS (Elastic Kubernetes) Pod Identity Association (<unknown>): operation error EKS: CreatePodIdentityAssociation, https response error StatusCode: 404, RequestID: 4e7f8dc7-7efe-48a9-9bd9-020684941648, ResourceNotFoundException: No cluster found for name: my-eks-shop-cluster.[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with module.dns.aws_eks_pod_identity_association.external_dns,
[31m│[0m [0m  on modules\DNS\main.tf line 66, in resource "aws_eks_pod_identity_association" "external_dns":
[31m│[0m [0m  66: resource "aws_eks_pod_identity_association" "external_dns" [4m{[0m[0m
[31m│[0m [0m
[31m│[0m [0moperation error EKS: CreatePodIdentityAssociation, https response error
[31m│[0m [0mStatusCode: 404, RequestID: 4e7f8dc7-7efe-48a9-9bd9-020684941648,
[31m│[0m [0mResourceNotFoundException: No cluster found for name: my-eks-shop-cluster.
[31m╵[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating IAM Role (YourEKSClusterRole-335507813633-my-eks-shop-cluster): operation error IAM: CreateRole, https response error StatusCode: 409, RequestID: 03c69731-abbb-43cd-aba8-91a31526e503, EntityAlreadyExists: Role with name YourEKSClusterRole-335507813633-my-eks-shop-cluster already exists.[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with module.eks.aws_iam_role.eks_cluster,
[31m│[0m [0m  on modules\EKS\main.tf line 12, in resource "aws_iam_role" "eks_cluster":
[31m│[0m [0m  12: resource "aws_iam_role" "eks_cluster" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating IAM Role (YourEKSNodeRole-335507813633-my-eks-shop-cluster): operation error IAM: CreateRole, https response error StatusCode: 409, RequestID: 96b3ea11-dffc-4d21-b846-e24dfb7c46ea, EntityAlreadyExists: Role with name YourEKSNodeRole-335507813633-my-eks-shop-cluster already exists.[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with module.eks.aws_iam_role.eks_node,
[31m│[0m [0m  on modules\EKS\main.tf line 31, in resource "aws_iam_role" "eks_node":
[31m│[0m [0m  31: resource "aws_iam_role" "eks_node" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating IAM Role (ShoppingMallPodRole-335507813633-my-eks-shop-cluster): operation error IAM: CreateRole, https response error StatusCode: 409, RequestID: 87c6b058-6661-4f35-a88d-b8de8cb75b27, EntityAlreadyExists: Role with name ShoppingMallPodRole-335507813633-my-eks-shop-cluster already exists.[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with module.eks.aws_iam_role.shopping_mall_role,
[31m│[0m [0m  on modules\EKS\main.tf line 130, in resource "aws_iam_role" "shopping_mall_role":
[31m│[0m [0m 130: resource "aws_iam_role" "shopping_mall_role" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mcreating ElastiCache Cache Cluster (my-eks-shop-cluster-redis): operation error ElastiCache: CreateCacheCluster, https response error StatusCode: 400, RequestID: 1df11e5b-5d5f-4a04-9f9b-81084d0e2009, InvalidParameterCombination: Expected a parameter group of family redis6.x but found one of family redis7[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with module.redis.aws_elasticache_cluster.redis,
[31m│[0m [0m  on modules\REDIS\main.tf line 64, in resource "aws_elasticache_cluster" "redis":
[31m│[0m [0m  64: resource "aws_elasticache_cluster" "redis" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m

❌ ERROR: line 147 while running: terraform -chdir="$TF_DIR" apply -auto-approve (exit=1)
👉 Full log: ./logs/bootstrap_20250909_095923.log
Dropping you into interactive shell (type: exit to quit)
