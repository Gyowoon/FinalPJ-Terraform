== Bootstrap started Mon Sep  8 08:53:20 KST 2025 ==

==================== Running terraform apply =====================
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Finding hashicorp/kubernetes versions matching "~> 2.23"...
- Finding hashicorp/aws versions matching "~> 5.0"...
- Using previously-installed hashicorp/kubernetes v2.38.0
- Using previously-installed hashicorp/aws v5.100.0

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_ami.bastion: Reading...[0m[0m
[0m[1maws_ecr_repository.shop_frontend: Refreshing state... [id=shop-frontend][0m
[0m[1maws_ecr_repository.shop_backend: Refreshing state... [id=shop-backend][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=335507813633][0m
[0m[1mdata.aws_ami.bastion: Read complete after 2s [id=ami-068d7b3dd93d9c2a6][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # data.aws_eks_cluster.eks[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_cluster" "eks" {
      [32m+[0m[0m access_config             = (known after apply)
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m certificate_authority     = (known after apply)
      [32m+[0m[0m cluster_id                = (known after apply)
      [32m+[0m[0m compute_config            = (known after apply)
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types = (known after apply)
      [32m+[0m[0m endpoint                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m identity                  = (known after apply)
      [32m+[0m[0m kubernetes_network_config = (known after apply)
      [32m+[0m[0m name                      = "my-eks-shop-cluster"
      [32m+[0m[0m outpost_config            = (known after apply)
      [32m+[0m[0m platform_version          = (known after apply)
      [32m+[0m[0m remote_network_config     = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m storage_config            = (known after apply)
      [32m+[0m[0m tags                      = (known after apply)
      [32m+[0m[0m upgrade_policy            = (known after apply)
      [32m+[0m[0m version                   = (known after apply)
      [32m+[0m[0m vpc_config                = (known after apply)
      [32m+[0m[0m zonal_shift_config        = (known after apply)
    }

[1m  # data.aws_eks_cluster_auth.eks[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_cluster_auth" "eks" {
      [32m+[0m[0m id    = (known after apply)
      [32m+[0m[0m name  = "my-eks-shop-cluster"
      [32m+[0m[0m token = (sensitive value)
    }

[1m  # aws_db_instance.db[0m will be created
[0m  [32m+[0m[0m resource "aws_db_instance" "db" {
      [32m+[0m[0m address                               = (known after apply)
      [32m+[0m[0m allocated_storage                     = 20
      [32m+[0m[0m apply_immediately                     = true
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m backup_retention_period               = (known after apply)
      [32m+[0m[0m backup_target                         = (known after apply)
      [32m+[0m[0m backup_window                         = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m character_set_name                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m database_insights_mode                = (known after apply)
      [32m+[0m[0m db_name                               = "shopdb"
      [32m+[0m[0m db_subnet_group_name                  = "my-eks-shop-cluster-db-subnet-group"
      [32m+[0m[0m dedicated_log_volume                  = false
      [32m+[0m[0m delete_automated_backups              = true
      [32m+[0m[0m deletion_protection                   = false
      [32m+[0m[0m domain_fqdn                           = (known after apply)
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "mysql"
      [32m+[0m[0m engine_lifecycle_support              = (known after apply)
      [32m+[0m[0m engine_version                        = "8.0"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m hosted_zone_id                        = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "my-eks-shop-cluster-db"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.t3.micro"
      [32m+[0m[0m iops                                  = (known after apply)
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m latest_restorable_time                = (known after apply)
      [32m+[0m[0m license_model                         = (known after apply)
      [32m+[0m[0m listener_endpoint                     = (known after apply)
      [32m+[0m[0m maintenance_window                    = (known after apply)
      [32m+[0m[0m master_user_secret                    = (known after apply)
      [32m+[0m[0m master_user_secret_kms_key_id         = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m multi_az                              = false
      [32m+[0m[0m nchar_character_set_name              = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m option_group_name                     = (known after apply)
      [32m+[0m[0m parameter_group_name                  = (known after apply)
      [32m+[0m[0m password                              = (sensitive value)
      [32m+[0m[0m password_wo                           = (write-only attribute)
      [32m+[0m[0m performance_insights_enabled          = false
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m publicly_accessible                   = false
      [32m+[0m[0m replica_mode                          = (known after apply)
      [32m+[0m[0m replicas                              = (known after apply)
      [32m+[0m[0m resource_id                           = (known after apply)
      [32m+[0m[0m skip_final_snapshot                   = true
      [32m+[0m[0m snapshot_identifier                   = (known after apply)
      [32m+[0m[0m status                                = (known after apply)
      [32m+[0m[0m storage_throughput                    = (known after apply)
      [32m+[0m[0m storage_type                          = (known after apply)
      [32m+[0m[0m tags_all                              = (known after apply)
      [32m+[0m[0m timezone                              = (known after apply)
      [32m+[0m[0m username                              = "admin"
      [32m+[0m[0m vpc_security_group_ids                = (known after apply)
    }

[1m  # aws_db_subnet_group.db[0m will be created
[0m  [32m+[0m[0m resource "aws_db_subnet_group" "db" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m description             = "Managed by Terraform"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m name                    = "my-eks-shop-cluster-db-subnet-group"
      [32m+[0m[0m name_prefix             = (known after apply)
      [32m+[0m[0m subnet_ids              = (known after apply)
      [32m+[0m[0m supported_network_types = (known after apply)
      [32m+[0m[0m tags                    = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-db-subnet-group"
        }
      [32m+[0m[0m tags_all                = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-db-subnet-group"
        }
      [32m+[0m[0m vpc_id                  = (known after apply)
    }

[1m  # aws_eip.nat_eip[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat_eip" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Name" = "MyVPC-NAT-EIP"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Name" = "MyVPC-NAT-EIP"
        }
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # aws_eks_access_entry.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "bastion" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = "my-eks-shop-cluster"
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = [
          [32m+[0m[0m "eks-admins",
        ]
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = (known after apply)
      [32m+[0m[0m tags_all          = (known after apply)
      [32m+[0m[0m type              = "STANDARD"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # aws_eks_addon.coredns[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "coredns" {
      [32m+[0m[0m addon_name           = "coredns"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "my-eks-shop-cluster"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_eks_addon.kube_proxy[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "kube_proxy" {
      [32m+[0m[0m addon_name           = "kube-proxy"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "my-eks-shop-cluster"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_eks_addon.pod_identity_agent[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "pod_identity_agent" {
      [32m+[0m[0m addon_name           = "eks-pod-identity-agent"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "my-eks-shop-cluster"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_eks_addon.vpc_cni[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "vpc_cni" {
      [32m+[0m[0m addon_name           = "vpc-cni"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "my-eks-shop-cluster"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_eks_cluster.eks[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "eks" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "my-eks-shop-cluster"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags_all                      = (known after apply)
      [32m+[0m[0m version                       = "1.33"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = true
        }

      [32m+[0m[0m kubernetes_network_config (known after apply)

      [32m+[0m[0m upgrade_policy (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m subnet_ids                = (known after apply)
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # aws_eks_node_group.nodes[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "nodes" {
      [32m+[0m[0m ami_type               = "AL2023_x86_64_STANDARD"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "ON_DEMAND"
      [32m+[0m[0m cluster_name           = "my-eks-shop-cluster"
      [32m+[0m[0m disk_size              = 20
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "m7i-flex.large",
        ]
      [32m+[0m[0m node_group_name        = "YourEKSNodeGroups"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m node_repair_config (known after apply)

      [32m+[0m[0m remote_access {
          [32m+[0m[0m ec2_ssh_key = "LetMeIn"
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 4
          [32m+[0m[0m max_size     = 4
          [32m+[0m[0m min_size     = 4
        }

      [32m+[0m[0m update_config (known after apply)
    }

[1m  # aws_eks_pod_identity_association.external_dns[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_pod_identity_association" "external_dns" {
      [32m+[0m[0m association_arn = (known after apply)
      [32m+[0m[0m association_id  = (known after apply)
      [32m+[0m[0m cluster_name    = "my-eks-shop-cluster"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m namespace       = "kube-system"
      [32m+[0m[0m role_arn        = (known after apply)
      [32m+[0m[0m service_account = "external-dns"
      [32m+[0m[0m tags_all        = {}
    }

[1m  # aws_eks_pod_identity_association.shopping_mall[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_pod_identity_association" "shopping_mall" {
      [32m+[0m[0m association_arn = (known after apply)
      [32m+[0m[0m association_id  = (known after apply)
      [32m+[0m[0m cluster_name    = "my-eks-shop-cluster"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m namespace       = "shop"
      [32m+[0m[0m role_arn        = (known after apply)
      [32m+[0m[0m service_account = "shopping-mall-sa"
      [32m+[0m[0m tags_all        = {}
    }

[1m  # aws_elasticache_cluster.redis[0m will be created
[0m  [32m+[0m[0m resource "aws_elasticache_cluster" "redis" {
      [32m+[0m[0m apply_immediately          = (known after apply)
      [32m+[0m[0m arn                        = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade = "true"
      [32m+[0m[0m availability_zone          = (known after apply)
      [32m+[0m[0m az_mode                    = (known after apply)
      [32m+[0m[0m cache_nodes                = (known after apply)
      [32m+[0m[0m cluster_address            = (known after apply)
      [32m+[0m[0m cluster_id                 = "my-eks-shop-cluster-redis"
      [32m+[0m[0m configuration_endpoint     = (known after apply)
      [32m+[0m[0m engine                     = "redis"
      [32m+[0m[0m engine_version             = "6.x"
      [32m+[0m[0m engine_version_actual      = (known after apply)
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m ip_discovery               = (known after apply)
      [32m+[0m[0m maintenance_window         = (known after apply)
      [32m+[0m[0m network_type               = (known after apply)
      [32m+[0m[0m node_type                  = "cache.t3.micro"
      [32m+[0m[0m num_cache_nodes            = 1
      [32m+[0m[0m parameter_group_name       = (known after apply)
      [32m+[0m[0m port                       = 6379
      [32m+[0m[0m preferred_outpost_arn      = (known after apply)
      [32m+[0m[0m replication_group_id       = (known after apply)
      [32m+[0m[0m security_group_ids         = (known after apply)
      [32m+[0m[0m snapshot_window            = (known after apply)
      [32m+[0m[0m subnet_group_name          = "my-eks-shop-cluster-redis-subnet-group"
      [32m+[0m[0m tags_all                   = (known after apply)
      [32m+[0m[0m transit_encryption_enabled = (known after apply)
    }

[1m  # aws_elasticache_subnet_group.redis[0m will be created
[0m  [32m+[0m[0m resource "aws_elasticache_subnet_group" "redis" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Managed by Terraform"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "my-eks-shop-cluster-redis-subnet-group"
      [32m+[0m[0m subnet_ids  = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
      [32m+[0m[0m vpc_id      = (known after apply)
    }

[1m  # aws_iam_instance_profile.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_instance_profile" "bastion" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m create_date = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "my-eks-shop-cluster-bastion-profile"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m role        = "my-eks-shop-cluster-bastion-role"
      [32m+[0m[0m tags_all    = (known after apply)
      [32m+[0m[0m unique_id   = (known after apply)
    }

[1m  # aws_iam_policy.external_dns[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "external_dns" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Allow ExternalDNS to manage Route53 records"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "external-dns-route53-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "route53:ListHostedZones",
                          [32m+[0m[0m "route53:ListResourceRecordSets",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "route53:ChangeResourceRecordSets",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:route53:::hostedzone/Z076855811XMR50K5FM98"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # aws_iam_role.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "bastion" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "my-eks-shop-cluster-bastion-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_cluster" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                          [32m+[0m[0m "sts:TagSession",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "YourEKSClusterRole-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role.eks_node[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_node" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "YourEKSNodeRole-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role.external_dns[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "external_dns" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                          [32m+[0m[0m "sts:TagSession",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "pods.eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "external-dns-pod-identity-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role.shopping_mall_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "shopping_mall_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:AssumeRole",
                          [32m+[0m[0m "sts:TagSession",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "pods.eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "ShoppingMallPodRole-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role_policy.shopping_mall_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "shopping_mall_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "ShoppingMallPolicy-335507813633-my-eks-shop-cluster"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "rds:DescribeDBInstances",
                          [32m+[0m[0m "rds:DescribeDBClusters",
                          [32m+[0m[0m "rds:Connect",
                          [32m+[0m[0m "elasticache:DescribeCacheClusters",
                          [32m+[0m[0m "elasticache:DescribeReplicationGroups",
                          [32m+[0m[0m "elasticache:Connect",
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:DeleteObject",
                          [32m+[0m[0m "s3:ListBucket",
                          [32m+[0m[0m "secretsmanager:GetSecretValue",
                          [32m+[0m[0m "secretsmanager:DescribeSecret",
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:DescribeLogGroups",
                          [32m+[0m[0m "logs:DescribeLogStreams",
                          [32m+[0m[0m "ssm:GetParameter",
                          [32m+[0m[0m "ssm:GetParameters",
                          [32m+[0m[0m "ssm:GetParametersByPath",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.bastion_policies["admin"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "bastion_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
      [32m+[0m[0m role       = "my-eks-shop-cluster-bastion-role"
    }

[1m  # aws_iam_role_policy_attachment.cluster_policies[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy"
      [32m+[0m[0m role       = "YourEKSClusterRole-335507813633-my-eks-shop-cluster"
    }

[1m  # aws_iam_role_policy_attachment.cluster_policies[1][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = "YourEKSClusterRole-335507813633-my-eks-shop-cluster"
    }

[1m  # aws_iam_role_policy_attachment.cluster_policies[2][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSComputePolicy"
      [32m+[0m[0m role       = "YourEKSClusterRole-335507813633-my-eks-shop-cluster"
    }

[1m  # aws_iam_role_policy_attachment.cluster_policies[3][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy"
      [32m+[0m[0m role       = "YourEKSClusterRole-335507813633-my-eks-shop-cluster"
    }

[1m  # aws_iam_role_policy_attachment.cluster_policies[4][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy"
      [32m+[0m[0m role       = "YourEKSClusterRole-335507813633-my-eks-shop-cluster"
    }

[1m  # aws_iam_role_policy_attachment.external_dns_attach[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "external_dns_attach" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "external-dns-pod-identity-role"
    }

[1m  # aws_iam_role_policy_attachment.node_policies[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "node_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = "YourEKSNodeRole-335507813633-my-eks-shop-cluster"
    }

[1m  # aws_iam_role_policy_attachment.node_policies[1][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "node_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "YourEKSNodeRole-335507813633-my-eks-shop-cluster"
    }

[1m  # aws_iam_role_policy_attachment.node_policies[2][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "node_policies" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "YourEKSNodeRole-335507813633-my-eks-shop-cluster"
    }

[1m  # aws_iam_role_policy_attachment.shopping_mall_ecr_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "shopping_mall_ecr_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "ShoppingMallPodRole-335507813633-my-eks-shop-cluster"
    }

[1m  # aws_instance.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "bastion" {
      [32m+[0m[0m ami                                  = "ami-068d7b3dd93d9c2a6"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = true
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m enable_primary_ipv6                  = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = "my-eks-shop-cluster-bastion-profile"
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t3.large"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "LetMeIn"
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-bastion"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-bastion"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = "b6cee04d9df13814e9c4f22782647d2a4a812330"
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)

      [32m+[0m[0m capacity_reservation_specification (known after apply)

      [32m+[0m[0m cpu_options (known after apply)

      [32m+[0m[0m ebs_block_device (known after apply)

      [32m+[0m[0m enclave_options (known after apply)

      [32m+[0m[0m ephemeral_block_device (known after apply)

      [32m+[0m[0m instance_market_options (known after apply)

      [32m+[0m[0m maintenance_options (known after apply)

      [32m+[0m[0m metadata_options (known after apply)

      [32m+[0m[0m network_interface (known after apply)

      [32m+[0m[0m private_dns_name_options (known after apply)

      [32m+[0m[0m root_block_device {
          [32m+[0m[0m delete_on_termination = true
          [32m+[0m[0m device_name           = (known after apply)
          [32m+[0m[0m encrypted             = (known after apply)
          [32m+[0m[0m iops                  = (known after apply)
          [32m+[0m[0m kms_key_id            = (known after apply)
          [32m+[0m[0m tags_all              = (known after apply)
          [32m+[0m[0m throughput            = (known after apply)
          [32m+[0m[0m volume_id             = (known after apply)
          [32m+[0m[0m volume_size           = 30
          [32m+[0m[0m volume_type           = "gp3"
        }
    }

[1m  # aws_internet_gateway.igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "MyVPC-Public"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "MyVPC-Public"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # aws_nat_gateway.nat[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "MyVPC-NAT"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "MyVPC-NAT"
        }
    }

[1m  # aws_route_table.private[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m nat_gateway_id             = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "MyVPC-Pri-RTB"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "MyVPC-Pri-RTB"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # aws_route_table.public[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m gateway_id                 = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "MyVPC-Pub-RTB"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "MyVPC-Pub-RTB"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # aws_route_table_association.private1[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private1" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.private2[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private2" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.public1[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public1" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.public2[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public2" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_security_group.bastion[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "bastion" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for bastion host"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "Allow SSH from allowed CIDRs"
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "my-eks-shop-cluster-bastion-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-bastion"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-bastion"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group.db[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "db" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for MySQL RDS instance"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.10.0.0/16",
                ]
              [32m+[0m[0m description      = "Allow MySQL access from within the VPC"
              [32m+[0m[0m from_port        = 3306
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3306
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "my-eks-shop-cluster-db-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-db"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-db"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group.redis[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "redis" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for ElastiCache Redis"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.10.0.0/16",
                ]
              [32m+[0m[0m description      = "Allow Redis access from within the VPC"
              [32m+[0m[0m from_port        = 6379
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 6379
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "my-eks-shop-cluster-redis-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-redis"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "my-eks-shop-cluster-redis"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_subnet.private1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-northeast-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.10.11.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                                      = "Private-SubNet-1"
          [32m+[0m[0m "kubernetes.io/cluster/my-eks-shop-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/internal-elb"           = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                                      = "Private-SubNet-1"
          [32m+[0m[0m "kubernetes.io/cluster/my-eks-shop-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/internal-elb"           = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.private2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-northeast-2c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.10.12.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                                      = "Private-SubNet-2"
          [32m+[0m[0m "kubernetes.io/cluster/my-eks-shop-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/internal-elb"           = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                                      = "Private-SubNet-2"
          [32m+[0m[0m "kubernetes.io/cluster/my-eks-shop-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/internal-elb"           = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.public1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-northeast-2a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.10.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                                      = "Public-SubNet-1"
          [32m+[0m[0m "kubernetes.io/cluster/my-eks-shop-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/elb"                    = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                                      = "Public-SubNet-1"
          [32m+[0m[0m "kubernetes.io/cluster/my-eks-shop-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/elb"                    = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.public2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-northeast-2c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.10.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name"                                      = "Public-SubNet-2"
          [32m+[0m[0m "kubernetes.io/cluster/my-eks-shop-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/elb"                    = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name"                                      = "Public-SubNet-2"
          [32m+[0m[0m "kubernetes.io/cluster/my-eks-shop-cluster" = "shared"
          [32m+[0m[0m "kubernetes.io/role/elb"                    = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.main[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "main" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.10.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name"                                      = "MyVPC"
          [32m+[0m[0m "kubernetes.io/cluster/my-eks-shop-cluster" = "shared"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name"                                      = "MyVPC"
          [32m+[0m[0m "kubernetes.io/cluster/my-eks-shop-cluster" = "shared"
        }
    }

[1m  # kubernetes_cluster_role_binding.bastion_admin[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_cluster_role_binding" "bastion_admin" {
      [32m+[0m[0m id = (known after apply)

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "bastion-admin-binding"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }

      [32m+[0m[0m role_ref {
          [32m+[0m[0m api_group = "rbac.authorization.k8s.io"
          [32m+[0m[0m kind      = "ClusterRole"
          [32m+[0m[0m name      = "cluster-admin"
        }

      [32m+[0m[0m subject {
          [32m+[0m[0m api_group = "rbac.authorization.k8s.io"
          [32m+[0m[0m kind      = "Group"
          [32m+[0m[0m name      = "eks-admins"
          [32m+[0m[0m namespace = "default"
        }
    }

[1m  # kubernetes_namespace.shop[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_namespace" "shop" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m wait_for_default_service_account = false

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "shop"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # kubernetes_service_account.shopping_mall[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_service_account" "shopping_mall" {
      [32m+[0m[0m automount_service_account_token = true
      [32m+[0m[0m default_secret_name             = (known after apply)
      [32m+[0m[0m id                              = (known after apply)

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "shopping-mall-sa"
          [32m+[0m[0m namespace        = "shop"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1mPlan:[0m 53 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m bastion_key_name              = "LetMeIn"
  [32m+[0m[0m bastion_public_ip             = (known after apply)
  [32m+[0m[0m cluster_endpoint              = (known after apply)
  [32m+[0m[0m cluster_name                  = "my-eks-shop-cluster"
  [32m+[0m[0m pod_identity_association_id   = (known after apply)
  [32m+[0m[0m rds_endpoint                  = (known after apply)
  [32m+[0m[0m redis_endpoint                = (known after apply)
  [32m+[0m[0m shopping_mall_role_arn        = (known after apply)
  [32m+[0m[0m shopping_mall_service_account = "shopping-mall-sa"
  [32m+[0m[0m vpc_id                        = (known after apply)
[0m[1maws_iam_policy.external_dns: Creating...[0m[0m
[0m[1maws_iam_role.bastion: Creating...[0m[0m
[0m[1maws_iam_role.eks_cluster: Creating...[0m[0m
[0m[1maws_iam_role.external_dns: Creating...[0m[0m
[0m[1maws_iam_role.shopping_mall_role: Creating...[0m[0m
[0m[1maws_iam_role.eks_node: Creating...[0m[0m
[0m[1maws_eip.nat_eip: Creating...[0m[0m
[0m[1maws_vpc.main: Creating...[0m[0m
[0m[1maws_eip.nat_eip: Creation complete after 2s [id=eipalloc-0173a435844ec9e18][0m
[0m[1maws_iam_policy.external_dns: Creation complete after 3s [id=arn:aws:iam::335507813633:policy/external-dns-route53-policy][0m
[0m[1maws_iam_role.eks_cluster: Creation complete after 3s [id=YourEKSClusterRole-335507813633-my-eks-shop-cluster][0m
[0m[1maws_iam_role.eks_node: Creation complete after 3s [id=YourEKSNodeRole-335507813633-my-eks-shop-cluster][0m
[0m[1maws_iam_role.external_dns: Creation complete after 3s [id=external-dns-pod-identity-role][0m
[0m[1maws_iam_role.shopping_mall_role: Creation complete after 3s [id=ShoppingMallPodRole-335507813633-my-eks-shop-cluster][0m
[0m[1maws_iam_role_policy_attachment.node_policies[1]: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.cluster_policies[2]: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.cluster_policies[1]: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.cluster_policies[3]: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.cluster_policies[4]: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.node_policies[2]: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.cluster_policies[0]: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.node_policies[0]: Creating...[0m[0m
[0m[1maws_iam_role.bastion: Creation complete after 3s [id=my-eks-shop-cluster-bastion-role][0m
[0m[1maws_iam_role_policy_attachment.external_dns_attach: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.cluster_policies[3]: Creation complete after 0s [id=YourEKSClusterRole-335507813633-my-eks-shop-cluster-20250907235358179600000001][0m
[0m[1maws_iam_role_policy_attachment.cluster_policies[0]: Creation complete after 0s [id=YourEKSClusterRole-335507813633-my-eks-shop-cluster-20250907235358179600000002][0m
[0m[1maws_iam_role_policy_attachment.shopping_mall_ecr_policy: Creating...[0m[0m
[0m[1maws_iam_role_policy.shopping_mall_policy: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.cluster_policies[4]: Creation complete after 1s [id=YourEKSClusterRole-335507813633-my-eks-shop-cluster-20250907235358184700000003][0m
[0m[1maws_iam_instance_profile.bastion: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.cluster_policies[1]: Creation complete after 1s [id=YourEKSClusterRole-335507813633-my-eks-shop-cluster-20250907235358208400000005][0m
[0m[1maws_iam_role_policy_attachment.bastion_policies["admin"]: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.cluster_policies[2]: Creation complete after 1s [id=YourEKSClusterRole-335507813633-my-eks-shop-cluster-20250907235358202900000004][0m
[0m[1maws_iam_role_policy_attachment.node_policies[2]: Creation complete after 1s [id=YourEKSNodeRole-335507813633-my-eks-shop-cluster-20250907235358252600000006][0m
[0m[1maws_iam_role_policy_attachment.external_dns_attach: Creation complete after 1s [id=external-dns-pod-identity-role-20250907235358488700000008][0m
[0m[1maws_iam_role_policy_attachment.node_policies[0]: Creation complete after 1s [id=YourEKSNodeRole-335507813633-my-eks-shop-cluster-20250907235358487000000007][0m
[0m[1maws_iam_role_policy_attachment.node_policies[1]: Creation complete after 1s [id=YourEKSNodeRole-335507813633-my-eks-shop-cluster-20250907235358490600000009][0m
[0m[1maws_iam_role_policy_attachment.shopping_mall_ecr_policy: Creation complete after 1s [id=ShoppingMallPodRole-335507813633-my-eks-shop-cluster-2025090723535901800000000a][0m
[0m[1maws_iam_role_policy_attachment.bastion_policies["admin"]: Creation complete after 0s [id=my-eks-shop-cluster-bastion-role-2025090723535905010000000b][0m
[0m[1maws_iam_role_policy.shopping_mall_policy: Creation complete after 2s [id=ShoppingMallPodRole-335507813633-my-eks-shop-cluster:ShoppingMallPolicy-335507813633-my-eks-shop-cluster][0m
[0m[1maws_vpc.main: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_iam_instance_profile.bastion: Creation complete after 8s [id=my-eks-shop-cluster-bastion-profile][0m
[0m[1maws_vpc.main: Creation complete after 14s [id=vpc-015ae7e5481dec087][0m
[0m[1maws_internet_gateway.igw: Creating...[0m[0m
[0m[1maws_subnet.private1: Creating...[0m[0m
[0m[1maws_subnet.private2: Creating...[0m[0m
[0m[1maws_subnet.public1: Creating...[0m[0m
[0m[1maws_subnet.public2: Creating...[0m[0m
[0m[1maws_security_group.db: Creating...[0m[0m
[0m[1maws_security_group.redis: Creating...[0m[0m
[0m[1maws_security_group.bastion: Creating...[0m[0m
[0m[1maws_internet_gateway.igw: Creation complete after 1s [id=igw-0aa325e667a59ebdc][0m
[0m[1maws_subnet.private2: Creation complete after 1s [id=subnet-0665b494f7fa5a02a][0m
[0m[1maws_route_table.public: Creating...[0m[0m
[0m[1maws_subnet.private1: Creation complete after 1s [id=subnet-00ffecedd47180cfb][0m
[0m[1maws_elasticache_subnet_group.redis: Creating...[0m[0m
[0m[1maws_db_subnet_group.db: Creating...[0m[0m
[0m[1maws_route_table.public: Creation complete after 1s [id=rtb-09fc02b9d0c813f49][0m
[0m[1maws_db_subnet_group.db: Creation complete after 2s [id=my-eks-shop-cluster-db-subnet-group][0m
[0m[1maws_elasticache_subnet_group.redis: Creation complete after 2s [id=my-eks-shop-cluster-redis-subnet-group][0m
[0m[1maws_security_group.redis: Creation complete after 3s [id=sg-0459c19c98b5be482][0m
[0m[1maws_security_group.bastion: Creation complete after 3s [id=sg-06631deee73168748][0m
[0m[1maws_elasticache_cluster.redis: Creating...[0m[0m
[0m[1maws_security_group.db: Creation complete after 3s [id=sg-0570d50e922740424][0m
[0m[1maws_db_instance.db: Creating...[0m[0m
[0m[1maws_subnet.public2: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_subnet.public1: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_subnet.public1: Creation complete after 11s [id=subnet-0313877d69c9bc0ab][0m
[0m[1maws_subnet.public2: Creation complete after 11s [id=subnet-012408abb5e7f6ff2][0m
[0m[1maws_route_table_association.public2: Creating...[0m[0m
[0m[1maws_route_table_association.public1: Creating...[0m[0m
[0m[1maws_nat_gateway.nat: Creating...[0m[0m
[0m[1maws_eks_cluster.eks: Creating...[0m[0m
[0m[1maws_route_table_association.public1: Creation complete after 1s [id=rtbassoc-039b453967b7979c5][0m
[0m[1maws_route_table_association.public2: Creation complete after 1s [id=rtbassoc-05d198d5c5e345e28][0m
[0m[1maws_elasticache_cluster.redis: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [00m20s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [00m20s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [00m20s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [00m20s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [00m30s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [00m30s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [00m30s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [00m30s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [00m40s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [00m40s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [00m40s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [00m40s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [00m50s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [00m50s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [00m50s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [00m50s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [01m00s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [01m00s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [01m00s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [01m00s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [01m10s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [01m10s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [01m10s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [01m10s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [01m20s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [01m20s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [01m20s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [01m20s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [01m30s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [01m30s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [01m31s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [01m30s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [01m40s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [01m40s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Still creating... [01m41s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [01m40s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [01m50s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [01m50s elapsed][0m[0m
[0m[1maws_nat_gateway.nat: Creation complete after 1m46s [id=nat-014a061b531ec2704][0m
[0m[1maws_route_table.private: Creating...[0m[0m
[0m[1maws_route_table.private: Creation complete after 1s [id=rtb-06b80a9a6ac68d938][0m
[0m[1maws_route_table_association.private1: Creating...[0m[0m
[0m[1maws_route_table_association.private2: Creating...[0m[0m
[0m[1maws_route_table_association.private2: Creation complete after 1s [id=rtbassoc-05db507515ff0cf3d][0m
[0m[1maws_route_table_association.private1: Creation complete after 1s [id=rtbassoc-0b5642dc86bd36374][0m
[0m[1maws_eks_cluster.eks: Still creating... [01m50s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [02m00s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [02m00s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [02m00s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [02m10s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [02m10s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [02m10s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [02m20s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [02m20s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [02m20s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [02m30s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [02m30s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [02m30s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [02m40s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [02m40s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [02m40s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [02m50s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [02m50s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [02m50s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [03m00s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [03m00s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [03m00s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [03m10s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [03m10s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [03m10s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [03m20s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [03m20s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [03m20s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [03m30s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [03m30s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [03m30s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [03m40s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [03m40s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [03m40s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [03m50s elapsed][0m[0m
[0m[1maws_db_instance.db: Still creating... [03m50s elapsed][0m[0m
[0m[1maws_db_instance.db: Creation complete after 3m57s [id=db-Q554EH7FCZTXHUK4QXSSGBBAQY][0m
[0m[1maws_eks_cluster.eks: Still creating... [03m50s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [04m00s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [04m00s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [04m10s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [04m10s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [04m20s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [04m20s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [04m30s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [04m30s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [04m40s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [04m40s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [04m50s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [04m50s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [05m00s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [05m00s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [05m10s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [05m10s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [05m20s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [05m20s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [05m30s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [05m30s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [05m40s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [05m40s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [05m50s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [05m50s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [06m00s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [06m00s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [06m10s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [06m10s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [06m20s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [06m20s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [06m30s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [06m30s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [06m40s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [06m40s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [06m50s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [06m50s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [07m00s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [07m00s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [07m10s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [07m10s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [07m20s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [07m20s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [07m30s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [07m30s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [07m40s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [07m40s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [07m50s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [07m50s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [08m00s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [08m00s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [08m10s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [08m10s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [08m20s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [08m20s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [08m30s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [08m30s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [08m40s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Still creating... [08m40s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [08m50s elapsed][0m[0m
[0m[1maws_eks_cluster.eks: Creation complete after 8m49s [id=my-eks-shop-cluster][0m
[0m[1mdata.aws_eks_cluster_auth.eks: Reading...[0m[0m
[0m[1mdata.aws_eks_cluster.eks: Reading...[0m[0m
[0m[1mdata.aws_eks_cluster_auth.eks: Read complete after 0s [id=my-eks-shop-cluster][0m
[0m[1maws_eks_addon.pod_identity_agent: Creating...[0m[0m
[0m[1maws_eks_access_entry.bastion: Creating...[0m[0m
[0m[1maws_eks_addon.kube_proxy: Creating...[0m[0m
[0m[1maws_eks_addon.vpc_cni: Creating...[0m[0m
[0m[1maws_instance.bastion: Creating...[0m[0m
[0m[1mdata.aws_eks_cluster.eks: Read complete after 0s [id=my-eks-shop-cluster][0m
[0m[1maws_eks_access_entry.bastion: Creation complete after 1s [id=my-eks-shop-cluster:arn:aws:iam::335507813633:role/my-eks-shop-cluster-bastion-role][0m
[0m[1maws_elasticache_cluster.redis: Still creating... [09m00s elapsed][0m[0m
[0m[1maws_eks_addon.kube_proxy: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_eks_addon.vpc_cni: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_eks_addon.pod_identity_agent: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_instance.bastion: Still creating... [00m10s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [09m10s elapsed][0m[0m
[0m[1maws_instance.bastion: Creation complete after 14s [id=i-02ebed9cc315d091f][0m
[0m[1maws_eks_addon.vpc_cni: Still creating... [00m20s elapsed][0m[0m
[0m[1maws_eks_addon.pod_identity_agent: Still creating... [00m20s elapsed][0m[0m
[0m[1maws_eks_addon.kube_proxy: Still creating... [00m20s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Still creating... [09m20s elapsed][0m[0m
[0m[1maws_elasticache_cluster.redis: Creation complete after 9m22s [id=my-eks-shop-cluster-redis][0m
[0m[1maws_eks_addon.vpc_cni: Creation complete after 25s [id=my-eks-shop-cluster:vpc-cni][0m
[0m[1maws_eks_addon.kube_proxy: Still creating... [22m02s elapsed][0m[0m
[0m[1maws_eks_addon.pod_identity_agent: Still creating... [22m02s elapsed][0m[0m
[33m╷[0m[0m
[33m│[0m [0m[1m[33mWarning: [0m[0m[1mRunning terraform apply again will remove the kubernetes add-on and attempt to create it again effectively purging previous add-on configuration[0m
[33m│[0m [0m
[33m│[0m [0m[0m  with aws_eks_addon.kube_proxy,
[33m│[0m [0m  on main-new.tf line 338, in resource "aws_eks_addon" "kube_proxy":
[33m│[0m [0m 338: resource "aws_eks_addon" "kube_proxy" [4m{[0m[0m
[33m│[0m [0m
[33m│[0m [0m(and one more similar warning elsewhere)
[33m╵[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mwaiting for EKS Add-On (my-eks-shop-cluster:kube-proxy) create: timeout while waiting for state to become 'ACTIVE' (timeout: 20m0s): operation error EKS: DescribeAddon, https response error StatusCode: 0, RequestID: , request send failed, Get "https://eks.ap-northeast-2.amazonaws.com/clusters/my-eks-shop-cluster/addons/kube-proxy": dial tcp: lookup eks.ap-northeast-2.amazonaws.com: no such host[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with aws_eks_addon.kube_proxy,
[31m│[0m [0m  on main-new.tf line 338, in resource "aws_eks_addon" "kube_proxy":
[31m│[0m [0m 338: resource "aws_eks_addon" "kube_proxy" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mwaiting for EKS Add-On (my-eks-shop-cluster:eks-pod-identity-agent) create: timeout while waiting for state to become 'ACTIVE' (timeout: 20m0s): operation error EKS: DescribeAddon, https response error StatusCode: 0, RequestID: , request send failed, Get "https://eks.ap-northeast-2.amazonaws.com/clusters/my-eks-shop-cluster/addons/eks-pod-identity-agent": dial tcp: lookup eks.ap-northeast-2.amazonaws.com: no such host[0m
[31m│[0m [0m
[31m│[0m [0m[0m  with aws_eks_addon.pod_identity_agent,
[31m│[0m [0m  on main-new.tf line 345, in resource "aws_eks_addon" "pod_identity_agent":
[31m│[0m [0m 345: resource "aws_eks_addon" "pod_identity_agent" [4m{[0m[0m
[31m│[0m [0m
[31m╵[0m[0m

❌ ERROR: line 147 while running: terraform -chdir="$TF_DIR" apply -auto-approve (exit=1)
👉 Full log: ./logs/bootstrap_20250908_085319.log
Dropping you into interactive shell (type: exit to quit)
bash: line 1: $'\E[Aex': command not found
